/**
 * MutablePolygon is a class that serves as a wrapper to hold everything
 * pertaining to a shape and to manage that shape and its attributes as the
 * shape is modified.
 * BY THE SOCS GROUP AT MIDWESTERN STATE UNIVERSITY
 *   - Samantha Tomeï
 *   - O'Neal Georges
 *   - Corey Pennycuff
 *   - Sri Lasya Brundavanam
 */

package socs.acad;

import org.andengine.entity.IEntity;
import org.andengine.entity.primitive.Ellipse;
import org.andengine.entity.primitive.PolyLine;
import org.andengine.entity.primitive.Polygon;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.shape.IShape;
import org.andengine.entity.shape.Shape;
import org.andengine.entity.text.Text;
import org.andengine.input.touch.TouchEvent;
import org.andengine.opengl.font.Font;
import org.andengine.opengl.shader.PositionColorShaderProgram;
import org.andengine.opengl.vbo.IVertexBufferObject;
import org.andengine.opengl.vbo.VertexBufferObjectManager;
import org.andengine.util.Constants;
import org.andengine.util.HorizontalAlign;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.FloatMath;

public class MutablePolygon extends Shape {
	// Constants
	private static final int VERTEXNONE = -1;
	private static final float VERTEXRADIUS = 15;
	private static final float DRAGTHRESHOLD = 5;

	// Variables
	protected float xMin, xMax, yMin, yMax, height, width, top, bottom, left, right;
	protected float dragOffsetX, dragOffsetY, dragRotation, previousX, previousY, previousSceneX, previousSceneY;
	protected Ellipse[] vertex = new Ellipse[0];
	protected boolean[] vertexTouchable = new boolean[0];
	protected VertexBufferObjectManager vboManager = null;
	private Text[] measurementText = new Text[0];
	protected boolean[] measurementVisible = new boolean[0];
	private Font font = null;
	private float vertexScale = 1;
	
	protected float[] mVertexX;
	protected float[] mVertexY;
	protected float[] measurement = new float[0];

	// State variables
	private boolean stateDragging = false;
	public enum PolygonState {
		NEW, VIEW, EDIT
	}
	protected PolygonState polygonState = PolygonState.NEW;
	private boolean hasMoved;
	private boolean vertexTouched;
	private boolean vertexTouchedAgain;
	private int vertexSelected = VERTEXNONE;
	private int vertexSelectedPrevious = VERTEXNONE;
	protected Shape displayShape = null;
	protected PolyLine outline = null;
	protected boolean isTouchable = true;
	protected boolean isRotatable = true;
	protected boolean closedState = true;
	protected boolean canAddVertex = true;
	protected boolean canDeleteVertex = true;
	protected int minimumVertexCount = 3;
	protected boolean showMeasurements = true;
	protected boolean automaticallyDelete = false;
	
	protected double jsonTouchX ;
	protected double jsonTouchY ;
	protected double jsonPolygonAngle;
	protected double jsonPolygonRadius;

	/**
	 * Constructor.
	 */
	public MutablePolygon(float pX, float pY, VertexBufferObjectManager pVertexBufferObjectManager) {
		super(pX, pY, PositionColorShaderProgram.getInstance());
		jsonTouchX = pX;
		jsonTouchX = pY;
		// Set default values
		vboManager = pVertexBufferObjectManager;
		mX = pX;
		mY = pY;
		xMax = yMax = xMin = yMin = height = width = 0;
	}
	
	/**
	 * Called after MutablePolygon is attached, used to attach display polygon.
	 */
	@Override
	public void onAttached() {
		if (mVertexX == null || mVertexY == null) {
			// Set a default square shape, 120px X 120px (10ft. X 10ft.)
			mVertexX = new float[]{-60f, 60f, 60f, -60f};
			mVertexY = new float[]{-60f, -60f, 60f, 60f};
		}

		// Setup the vertex and measurement defaults
		vertexTouchable = new boolean[mVertexX.length];
		measurementVisible = new boolean[mVertexX.length];
		measurement = new float[mVertexX.length];
		for (int i = 0; i < mVertexX.length; i++) {
			vertexTouchable[i] = true;
			measurementVisible[i] = true;
		}
		
		// Add the display shape
		regenerateShape();
		regenerateOutline();
		setState(PolygonState.VIEW);
	}
	
	/**
	 * Return JSON object containing shape info
	 */
	public JSONObject getJSONVertices()
	{
		JSONObject obj = new JSONObject();
		
		try{
			JSONArray jsonVerticesXArray= new JSONArray();
			JSONArray jsonVerticesYArray= new JSONArray();
			
			for(int i = 0;i<mVertexX.length;i++)
				jsonVerticesXArray.put(mVertexX[i]);

			for(int i = 0;i<mVertexY.length;i++)
				jsonVerticesYArray.put(mVertexY[i]);
			
			obj.put("PolygonX",jsonVerticesXArray );
			obj.put("PolygonY",jsonVerticesXArray );
			obj.put("PolygonAngle",this.getRotation());
			obj.put("PolygonTouchX", this.getX());
			obj.put("PolygonTouchY", this.getY());
			
		}  catch (JSONException e1) {
			e1.printStackTrace();
		}
		return obj;   
	}
	
	/**
	 * Set the vertex information, called from JSON reader
	 */
	public void setJSONVertices(float[] Xvertex,float[] Yvertex)
	{
		updateVertices(Xvertex,Yvertex);
		updateStats();
		updateVertices(mVertexX, mVertexY);
		refreshColor(); // Must be done otherwise it won't show up
	}
	
	
	/**
	 * Method to remove MutablePolygon and its additional data from the parent.
	 */
	public void detach() {
		clearVertices();
		clearMeasurements();
		this.detachChild(displayShape);
		displayShape = null;
		((Scene)getParent()).unregisterTouchArea(this);
		getParent().detachChild(this);
	}
	
	/**
	 * Method to regenerate the polygon shape.
	 */
	public void regenerateShape() {
		// Only do this if the shape is closed
		if (closedState) {
			this.detachChild(displayShape);
			displayShape = new Polygon(0, 0, mVertexX, mVertexY, vboManager);
			this.attachChild(displayShape);
			refreshColor();
		}
	}
	
	/**
	 * Method to regenerate the outline of the object.
	 */
	public void regenerateOutline() {
		float[] outlineVertexX, outlineVertexY;
		// This is a hack.  Polyline currently will automatically close the
		// line shape, so the only way around it is to double back on the
		// path if the shape is open
		if (closedState) {
			// The shape is closed
			outlineVertexX = mVertexX;
			outlineVertexY = mVertexY;
		}
		else {
			int end = mVertexX.length * 2;
			outlineVertexX = new float[end];
			outlineVertexY = new float[end];
			end--;
			for (int i = 0; i < mVertexX.length; i++) {
				outlineVertexX[i] = outlineVertexX[end - i] = mVertexX[i];
				outlineVertexY[i] = outlineVertexY[end - i] = mVertexY[i];
			}
		}
		this.detachChild(outline);
		outline = new PolyLine(0, 0, outlineVertexX, outlineVertexY, vboManager);
		outline.setLineWidth(3);
		outline.setColor(1f, 1f, 1f);
		outline.setAlpha(0);
		outline.setAlpha(1f);
		this.attachChild(outline);
	}
	
	/**
	 * Set the font used to show measurements.
	 */
	public void setFont(Font newFont) {
		font = newFont;
	}
	
	/**
	 * Convert a float into a string
	 * 1 unit of the float = 1"
	 */
	static public String formatDistance(float distance) {
		int feet;
		int inches;
		String output = "";
		feet = (int)FloatMath.floor(distance / 12);
		inches = (int)(distance % 12);
		if (feet == 0 && inches == 0) {
			return "0\"";
		}
		if (feet != 0) {
			output += Integer.toString(feet) + (inches == 0 ? "'" : "' ");
		}
		if (inches != 0) {
			output += Integer.toString(inches) + "\"";
		}
		return output;
	}

	/**
	 * Handles the touching of the area and alters the state of the polygon
	 * and its vertices as necessary.  This is the heavy lifter of this class,
	 * and does most of the work.
	 */
	@Override
	public boolean onAreaTouched(final TouchEvent pSceneTouchEvent, final float pTouchAreaLocalX, final float pTouchAreaLocalY) {
		switch(pSceneTouchEvent.getAction()) {
		case TouchEvent.ACTION_DOWN:
			// Set the state of the polygon
			stateDragging = true;
			hasMoved = false;

			// Record the initial touch position and rotation
			dragOffsetX = pTouchAreaLocalX;
			dragOffsetY = pTouchAreaLocalY;
			dragRotation = this.getRotation();

			// Get the coordinates of the touch relative to the object
			previousX = pTouchAreaLocalX;
			previousY = pTouchAreaLocalY;

			// Get the coordinates of the touch (actual pixels).
			previousSceneX = pSceneTouchEvent.getX();
			previousSceneY = pSceneTouchEvent.getY();

			// If we are in EDIT mode, then determine the context of the touch
			if (polygonState == PolygonState.EDIT) {

				// Determine if we are touching a specific vertex
				vertexTouched = false;
				float closestDistanceSquared = Float.MAX_VALUE;
				int closestVertex = VERTEXNONE;
				float side1, side2, distanceSquared;

				// For distance calculations, there is no need to take the
				// square roots.  This is a speed optimization.
				float minimumDistanceSquared = VERTEXRADIUS * VERTEXRADIUS * vertexScale * vertexScale;

				for (int i = 0; i < vertex.length; i++) {
					if (vertexTouchable[i]) {
						side1 = pTouchAreaLocalX - vertex[i].getX();
						side1 *= side1;
						side2 = pTouchAreaLocalY - vertex[i].getY();
						side2 *= side2;
						distanceSquared = side1 + side2;
						if (distanceSquared < closestDistanceSquared) {
							closestDistanceSquared = distanceSquared;
							closestVertex = i;
						}
					}
				}

				if (closestDistanceSquared <= minimumDistanceSquared) {
					vertexTouched = true;
					setVertex(closestVertex);
					vertexTouchedAgain = (vertexSelected == vertexSelectedPrevious);
					vertexSelectedPrevious = vertexSelected;
				}
				else {
					vertexTouchedAgain = false;
					vertexSelectedPrevious = VERTEXNONE;
					setVertex(VERTEXNONE);
				}
				
				// Determine if we should add a vertex
				if (!vertexTouched && canAddVertex) {
					// Cycle through the edges to find the closest
					closestDistanceSquared = Float.MAX_VALUE;
					// Do not include the closing edge if the polygon is not closed
					int limit = (closedState ? mVertexX.length : mVertexX.length - 1);
					for (int i = 0; i < limit; i++) {
						int j = (i + 1) % mVertexX.length;
						distanceSquared = pointSegmentDistance(pTouchAreaLocalX, pTouchAreaLocalY, mVertexX[i], mVertexY[i], mVertexX[j], mVertexY[j]);
						if (distanceSquared < closestDistanceSquared) {
							closestDistanceSquared = distanceSquared;
							closestVertex = i;
						}
					}
					if (closestDistanceSquared < minimumDistanceSquared) {
						// Add a new vertex at this point
						int newVertexPosition = closestVertex + 1;
						addVertex(newVertexPosition, pTouchAreaLocalX, pTouchAreaLocalY);
						setVertex(newVertexPosition);
						vertexTouched = true;
						vertexTouchedAgain = false;
						vertexSelectedPrevious = newVertexPosition;
						refreshColor();
					}
				}
			}
			break;

		case TouchEvent.ACTION_MOVE:
			if (stateDragging) {
				// Experience with tablets show that they are almost too
				// sensitive to movement, so put a threshold value to protect
				// against making it too difficult to perform a simple touch,
				// and hopefully avoid frustrating the user.

				if (hasMoved || (Math.abs(pSceneTouchEvent.getX() - previousSceneX) > DRAGTHRESHOLD) || (Math.abs(pSceneTouchEvent.getY() - previousSceneY) > DRAGTHRESHOLD)) {
					hasMoved = true;
					if (polygonState == PolygonState.VIEW) {
						// Get the distance moved relative to the object
						float xMoved, yMoved;
						xMoved = pTouchAreaLocalX - previousX;
						yMoved = pTouchAreaLocalY - previousY;

						// If rotated, then the raw xMoved and yMoved are not
						// accurate.  They must be rotated around the origin.
						float angle = (float)Math.toRadians(this.getRotation());
						float sinAngle = FloatMath.sin(angle);
						float cosAngle = FloatMath.cos(angle);
						float xDiff = xMoved * cosAngle - yMoved * sinAngle;
						float yDiff = xMoved * sinAngle + yMoved * cosAngle;

						// Move self
						this.setPosition(mX + xDiff, mY + yDiff);
						// If in edit mode, move the vertices
						if (polygonState == PolygonState.EDIT) {
							for (int i = 0; i < mVertexX.length; i++) {
								vertex[i].setPosition(mVertexX[i], mVertexY[i]);
							}
						}
						vertexSelectedPrevious = VERTEXNONE;
						vertexTouchedAgain = false;
					}

					// In EDIT mode
					else if (vertexTouched) {
						vertexTouchedAgain = false;
						// Move the vertex
						moveVertex(vertexSelected, pTouchAreaLocalX, pTouchAreaLocalY);
					}
					else if (isRotatable) {
						dragRotation -= (float) Math.toDegrees((Math.atan2(dragOffsetY, dragOffsetX) - Math.atan2(pTouchAreaLocalY, pTouchAreaLocalX)));
						this.setRotation(dragRotation);
						// Rotate child measurements
						populateMeasurements();
					}
				}
			}
			break;

		case TouchEvent.ACTION_UP:
			stateDragging = false;
			if (!hasMoved) {
				switch(polygonState) {
				case EDIT:
					if (vertexTouchedAgain) {
						if (canDeleteVertex) {
							if (mVertexX.length > minimumVertexCount) {
								// Remove a vertex
								removeVertex(vertexSelected);
								setVertex(VERTEXNONE);
								vertexSelectedPrevious = VERTEXNONE;
								refreshColor();
							}
							else if (automaticallyDelete) {
								// Can't have less than minimumVertexCount, remove it all.
								detach();
							}
						}
					}
					else {
						if (!vertexTouched) {
							// Set the state back to view
							setState(PolygonState.VIEW);
						}
					}
					break;
				case VIEW:
				default:
					setState(PolygonState.EDIT);
					break;
				}
			}
			break;
		}
		return true;
	}
	
	/**
	 * Move a single Vertex.
	 */
	public void moveVertex(int index, float pX, float pY) {
		mVertexX[vertexSelected] = pX;
		mVertexY[vertexSelected] = pY;
		updateVertices(mVertexX, mVertexY);

		// Set the background color.
		refreshColor();

		// Move the selected vertex to match.
		if (vertexTouchable[vertexSelected]) {
			vertex[vertexSelected].setPosition(mVertexX[vertexSelected], mVertexY[vertexSelected]);
		}
		
		// Update the measurements text and position
		int length = mVertexX.length;
		int precedingPosition = (index + length - 1) % length;
		int nextPosition = (index + 1) % length;

		measurement[precedingPosition] = FloatMath.sqrt(distanceSquared(mVertexX[precedingPosition], mVertexY[precedingPosition], mVertexX[index], mVertexY[index]));
		measurement[index] = FloatMath.sqrt(distanceSquared(mVertexX[index], mVertexY[index], mVertexX[nextPosition], mVertexY[nextPosition]));
		populateMeasurements();
	}
	
	/**
	 * Compute the distance (squared) from a point to a segment.
	 * These are well-known formulas.
	 */
	public float pointSegmentDistance(float px, float py, float ux, float uy, float vx, float vy) {
		float l2 = distanceSquared(ux, uy, vx, vy);
		if (l2 == 0) {
			return distanceSquared(px, py, ux, uy);
		}
		float t = ((px - ux) * (vx - ux) + (py - uy) * (vy - uy)) / l2;
		if (t < 0) {
			return distanceSquared(px, py, ux, uy);
		}
		else if (t > 1) {
			return distanceSquared(px, py, vx, vy);
		}
		return distanceSquared(px, py, ux + (t * (vx - ux)), uy + (t * (vy - uy)));
	}
	
	/**
	 * Compute the distance squared between two points.
	 */
	public float distanceSquared(float vx, float vy, float wx, float  wy) {
		float s1 = vx - wx;
		float s2 = vy - wy;
		return (s1 * s1) + (s2 * s2);
	}
	
	/**
	 * Determine whether or not two line segments intersect.
	 * This is a well-known solution.
	 * http://www.java-gaming.org/index.php?topic=22590.0
	 */
	public boolean segmentsIntersect(float x1, float y1, float x2, float y2,
			float x3, float y3, float x4, float y4) {
		// Return false if either of the lines have zero length
		if (x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
			return false;
		}
		// Fastest method, based on Franklin Antonio's "Faster Line Segment
		// Intersection" topic "in Graphics Gems III" book
		// (http://www.graphicsgems.org/)
		float ax = x2 - x1;
		float ay = y2 - y1;
		float bx = x3 - x4;
		float by = y3 - y4;
		float cx = x1 - x3;
		float cy = y1 - y3;

		float alphaNumerator = by * cx - bx * cy;
		float commonDenominator = ay * bx - ax * by;
		if (commonDenominator > 0) {
			if (alphaNumerator < 0 || alphaNumerator > commonDenominator) {
				return false;
			}
		} else if (commonDenominator < 0) {
			if (alphaNumerator > 0 || alphaNumerator < commonDenominator) {
				return false;
			}
		}
		float betaNumerator = ax * cy - ay * cx;
		if (commonDenominator > 0) {
			if (betaNumerator < 0 || betaNumerator > commonDenominator) {
				return false;
			}
		} else if (commonDenominator < 0) {
			if (betaNumerator > 0 || betaNumerator < commonDenominator) {
				return false;
			}
		}
		if (commonDenominator == 0) {
			// This code wasn't in Franklin Antonio's method. It was added by
			// Keith Woodward.
			// The lines are parallel. Check if they're collinear.
			float y3LessY1 = y3 - y1;
			// See http://mathworld.wolfram.com/Collinear.html
			float collinearityTestForP3 = x1 * (y2 - y3) + x2 * (y3LessY1) + x3
					* (y1 - y2);
			// If p3 is collinear with p1 and p2 then p4 will also be collinear,
			// since p1-p2 is parallel with p3-p4
			if (collinearityTestForP3 == 0) {
				// The lines are collinear. Now check if they overlap.
				if (x1 >= x3 && x1 <= x4 || x1 <= x3 && x1 >= x4 || x2 >= x3
						&& x2 <= x4 || x2 <= x3 && x2 >= x4 || x3 >= x1
						&& x3 <= x2 || x3 <= x1 && x3 >= x2) {
					if (y1 >= y3 && y1 <= y4 || y1 <= y3 && y1 >= y4
							|| y2 >= y3 && y2 <= y4 || y2 <= y3 && y2 >= y4
							|| y3 >= y1 && y3 <= y2 || y3 <= y1 && y3 >= y2) {
						return true;
					}
				}
			}
			return false;
		}
		return true;
	}

	/**
	 * Decide if the point is within the polygon.
	 * It says that this is deprecated, but it lies.  This method is called
	 * by the Scene, so therefore must exist.
	 */
	@Override
	@Deprecated
	public boolean contains(final float pX, final float pY) {
		// Early bailout check if engine allows this to be touched.
		if (ACadEngineActivity.disallowChildControl()) {
			return false;
		}
		// Early bailout check if the object is touchable
		if (!isTouchable) {
			return false;
		}
		// Early bailout check to avoid complex math later
		if (stateDragging) {
			return true;
		}
		// Early bailout check to verify that another shape is not selected
		ACadScene scene = this.getACadScene();
		if (scene.activeEntity != null && scene.activeEntity != this) {
			return false;
		}
		
		// Get local coordinates
		final float[] touchAreaLocalCoordinates = this.convertSceneToLocalCoordinates(pX, pY);
		final float localX = touchAreaLocalCoordinates[Constants.VERTEX_INDEX_X];
		final float localY = touchAreaLocalCoordinates[Constants.VERTEX_INDEX_Y];
		
		// Preliminary, bounding-box test
		if (mVertexX.length > 0 && xMin < localX && localX < xMax && yMin < localY && localY < yMax) {
			if (pointIsInside(localX, localY)) {
				return true;
			}
			// Last ditch effort for usability.  Accept the touch if it
			// is close to one of the segments.
			float maxDistanceSquared = VERTEXRADIUS * VERTEXRADIUS * vertexScale * vertexScale;
			int j;
			for (int i = 0; i < mVertexX.length; i++) {
				j = (i + 1) % mVertexX.length;
				if (pointSegmentDistance(localX, localY, mVertexX[i], mVertexY[i], mVertexX[j], mVertexY[j]) < maxDistanceSquared) {
					return true;
				}
			}
		}
		if (this.getState() == PolygonState.EDIT) {
			this.setState(PolygonState.VIEW);
		}
		return false;
	}
	
	/**
	 * Helper function to get the true offset X of the (X, Y) position.
	 */
	public float getOffsetX() {
		float trueX = 0;
		IEntity parent = this;
		while ((parent = parent.getParent()) != null) {
			trueX += parent.getX();
		}
		return trueX;
	}
	
	/**
	 * Helper function to get the true offset Y of the (X, Y) position.
	 */
	public float getOffsetY() {
		float trueY = 0;
		IEntity parent = this;
		while ((parent = parent.getParent()) != null) {
			trueY += parent.getY();
		}
		return trueY;
	}
	
	/**
	 * Helper function to get the combined parent Scale.
	 */
	public float getParentScale() {
		float trueScale = this.getScaleX();
		IEntity parent = this;
		while ((parent = parent.getParent()) != null) {
			trueScale *= parent.getScaleX();
		}
		return trueScale;
	}
	
	/**
	 * Helper function to compute whether or not a point is within the polygon
	 */
	public boolean pointIsInside(float pX, float pY) {
		// Use the Jordan curve theorem to check if the point is within the
		// polygon.  This is done by drawing a line from the point to a
		// known point outside of the polygon.  This segment is checked
		// against all segments of the polygon to see if they intersect.
		// If an odd number of intersections occur, then the point it
		// inside of the polygon.
		boolean inPolygon = false;
		float oX = xMin - VERTEXRADIUS - VERTEXRADIUS;
		float oY = yMin - VERTEXRADIUS - VERTEXRADIUS;
		int j;
		for (int i = 0; i < mVertexX.length; i++) {
			j = (i + 1) % mVertexX.length;
			if (segmentsIntersect(oX, oY, pX, pY, mVertexX[i], mVertexY[i], mVertexX[j], mVertexY[j])) {
				inPolygon = !inPolygon;
			}
		}
		return inPolygon;
	}

	
	/**
	 * Update the set of vertices that define this polygon.
	 * Unfortunately, the Polygon class is buggy when adding or moving vertices,
	 * so this is almost a complete re-work of the Polygon.updateVertices() code.
	 */
	public boolean updateVertices( float[] pVertexX, float[] pVertexY ) {
		mVertexX = pVertexX;
		mVertexY = pVertexY;
		regenerateShape();
		regenerateOutline();
		updateStats();
		return true;
	}
	
	/**
	 * Add a vertex at the specified position.
	 */
	public void addVertex(int position, float x, float y) {
		// Set up new copies of the various arrays
		int newLength = mVertexX.length + 1;
		float newVertexX[] = new float[newLength];
		float newVertexY[] = new float[newLength];
		boolean newVertexTouchable[] = new boolean[newLength];
		float newMeasurement[] = new float[newLength];
		boolean newMeasurementVisible[] = new boolean[newLength];

		// Copy the arrays, inserting the element to be added
		int j = 0;
		for (int i = 0; i <= mVertexX.length; i++, j++) {
			if (i == position) {
				newVertexX[j] = x;
				newVertexY[j] = y;
				newVertexTouchable[j] = true;
				newMeasurementVisible[j] = true;
				j++;
			}
			if (i != mVertexX.length) {
				newVertexX[j] = mVertexX[i];
				newVertexY[j] = mVertexY[i];
				newVertexTouchable[j] = vertexTouchable[i];
				newMeasurement[j] = measurement[i];
				newMeasurementVisible[j] = measurementVisible[i];
			}
		}
		
		// Calculate the new distances on either side of the vertex
		int precedingPosition = (position + newLength - 1) % newLength;
		int nextPosition = (position + 1) % newLength;
		newMeasurement[precedingPosition] = FloatMath.sqrt(distanceSquared(newVertexX[precedingPosition], newVertexY[precedingPosition], newVertexX[position], newVertexY[position]));
		newMeasurement[position] = FloatMath.sqrt(distanceSquared(newVertexX[position], newVertexY[position], newVertexX[nextPosition], newVertexY[nextPosition]));
		
		// Migrate the new values to replace the old
		vertexTouchable = newVertexTouchable;
		measurement = newMeasurement;
		measurementVisible = newMeasurementVisible;
		updateVertices(newVertexX, newVertexY);
		populateVertices();
		populateMeasurements();
	}
	
	/**
	 * Remove a vertex at the specified position.
	 */
	public void removeVertex(int position) {
		// Set up new copies of the various arrays
		int newLength = mVertexX.length - 1;
		float newVertexX[] = new float[newLength];
		float newVertexY[] = new float[newLength];
		boolean newVertexTouchable[] = new boolean[newLength];
		float newMeasurement[] = new float[newLength];
		boolean newMeasurementVisible[] = new boolean[newLength];

		// Copy the arrays, skipping the element to be omitted
		int j = 0;
		for (int i = 0; i < mVertexX.length; i++, j++) {
			if (i == position) {
				j--;
			}
			else {
				newVertexX[j] = mVertexX[i];
				newVertexY[j] = mVertexY[i];
				newVertexTouchable[j] = vertexTouchable[i];
				newMeasurement[j] = measurement[i];
				newMeasurementVisible[j] = measurementVisible[i];
			}
		}

		// Calculate the new distance from where the vertex was removed
		int precedingPosition = (position + newLength - 1) % newLength;
		int nextPosition = (precedingPosition + 1) % newLength;
		newMeasurement[precedingPosition] = FloatMath.sqrt(distanceSquared(newVertexX[precedingPosition], newVertexY[precedingPosition], newVertexX[nextPosition], newVertexY[nextPosition]));

		// Migrate the values to replace the original
		vertexTouchable = newVertexTouchable;
		measurement = newMeasurement;
		measurementVisible = newMeasurementVisible;
		updateVertices(newVertexX, newVertexY);
		populateVertices();
		populateMeasurements();
	}

	/**
	 * Update the vital information about the polygon.
	 */
	protected void updateStats() {
		if (mVertexX.length > 0) {
			// Find the extreme values to create a bounding box
			xMax = yMax = Float.MIN_VALUE;
			xMin = yMin = Float.MAX_VALUE;
			for (int i = 0; i < mVertexX.length; i++) {
				if (xMax < mVertexX[i]) {
					xMax = mVertexX[i];
				}
				if (xMin > mVertexX[i]) {
					xMin = mVertexX[i];
				}
				if (yMax < mVertexY[i]) {
					yMax = mVertexY[i];
				}
				if (yMin > mVertexY[i]) {
					yMin = mVertexY[i];
				}
			}
			// Adjust the bounding box to make it easier to select a vertex
			float vertexDistance = VERTEXRADIUS * vertexScale;
			xMin -= vertexDistance;
			yMin -= vertexDistance;
			xMax += vertexDistance;
			yMax += vertexDistance;

			width = xMax - xMin;
			height = yMax - yMin;
		}
		else {
			// Clear all values
			xMax = yMax = xMin = yMin = height = width = 0;
		}
	}
	
	/**
	 * Re-calculate the measurements of all edges.
	 */
	public void recalculateMeasurements() {
		// Allocate the measurement array, if necessary
		if (measurement.length != mVertexX.length) {
			measurement = new float[mVertexX.length];
			
			// Re-build the measurement visibility array
			measurementVisible = new boolean[mVertexX.length];
			for(int i = 0; i < mVertexX.length; i++) {
				measurementVisible[i] = true;
			}
		}

		// Calculate the values for the measurement array
		int j;
		for (int i = 0; i < mVertexX.length; i++) {
			j = (i + 1) % mVertexX.length;
			measurement[i] = FloatMath.sqrt(distanceSquared(mVertexX[i], mVertexY[i], mVertexX[j], mVertexY[j]));
		}
	}
	
	/**
	 * Clear the measurements list.
	 */
	public void clearMeasurements() {
		// Remove measurements if they exist
		for (int i = 0; i < measurementText.length; i++) {
			if (measurementText[i] != null) {
				this.detachChild(measurementText[i]);
			}
		}
	}
	
	/**
	 * Populate the Measurements list.
	 */
	public void populateMeasurements() {
		clearMeasurements();
		// Create the text objects
		Text t;
		measurementText = new Text[mVertexX.length];
		if (showMeasurements) {
			// Do not include the last measurement if the object is not closed
			int limit = closedState ? mVertexX.length : mVertexX.length - 1;
			int nextVertex;
			for (int i = 0; i < limit; i++) {
				if (measurementVisible[i]) {
					nextVertex = (i + 1) % mVertexX.length;
					float segmentAngle = (float)Math.atan2(mVertexY[nextVertex] - mVertexY[i], mVertexX[nextVertex] - mVertexX[i]);
					float perpendicularAngle = segmentAngle - (float)Math.PI / 2;
					float distanceAway = 14;
					float midpointX = (mVertexX[i] + mVertexX[nextVertex]) / 2;
					float midpointY = (mVertexY[i] + mVertexY[nextVertex]) / 2;
					float newX = midpointX + (distanceAway * FloatMath.cos(perpendicularAngle));
					float newY = midpointY + (distanceAway * FloatMath.sin(perpendicularAngle));
					if (pointIsInside(newX, newY)) {
						// Flip the point to the other side of the line
						newX -= 2 * (newX - midpointX);
						newY -= 2 * (newY - midpointY);
					}
					t = new Text(newX, newY, font, this.formatDistance(measurement[i]), 128, new TextOptions(HorizontalAlign.CENTER), vboManager);
					t.setPosition(t.getX() - t.getWidth() / 2f, t.getY() - t.getHeight() / 2f);
					t.setAlpha(0);
					t.setColor(1f, 1f, 0f);
					t.setAlpha(1f);
					t.setRotation((float)Math.toDegrees(segmentAngle));
					this.attachChild(t);
					measurementText[i] = t;
				}
			}
		}
	}
	
	/**
	 * Clear the vertex list.
	 */
	public void clearVertices() {
		// Remove circles around the vertices (if they exist)
		for (int i = 0; i < vertex.length; i++) {
			if (vertex[i] != null) {
				this.detachChild(vertex[i]);
			}
		}
		vertex = new Ellipse[0];
	}
	
	/**
	 * Populate the vertex list.
	 */
	public void populateVertices() {
		// Clear the vertices, if necessary
		clearVertices();

		// Create circles around the vertices
		Ellipse e;
		vertex = new Ellipse[mVertexX.length];
		for (int i = 0; i < mVertexX.length; i++) {
			if (vertexTouchable[i]) {
				e = new Ellipse(mVertexX[i], mVertexY[i], VERTEXRADIUS, VERTEXRADIUS, 3, 15, vboManager);
				// For some reason, the ellipse will not be drawn
				// automatically unless something is changed.  Here we are
				// changing the alpha so that it can be changed back in the
				// call to setVertex().
				e.setAlpha(0);
				e.setScale(vertexScale);
				this.attachChild(e);
				vertex[i] = e;
			}
			else {
				vertex[i] = null;
			}
		}
		
		// Make no vertex selected by default.
		setVertex(VERTEXNONE);
	}
	
	/**
	 * Set the scale of the vertices.
	 */
	public void setVertexScale(float newVertexScale) {
		if (vertexScale != newVertexScale && vertexTouchable.length == mVertexX.length && vertex.length == mVertexX.length) {
			vertexScale = newVertexScale;
			for (int i = 0; i < mVertexX.length; i++) {
				if (vertexTouchable[i] && vertex[i] != null) {
					vertex[i].setScale(vertexScale);
				}
			}
		}
		updateStats();
	}
	
	/**
	 * Get the parent scene.
	 */
	public ACadScene getACadScene() {
		IEntity parent = this;
		while (parent.hasParent() && !(parent instanceof ACadScene)) {
			parent = parent.getParent();
		}
		return (parent != null && (parent instanceof ACadScene)) ? (ACadScene)parent : null;
	}
	
	/**
	 * Set the state of the polygon to a constant defined in PolygonState.
	 */
	public void setState(PolygonState newState) {
		if (polygonState != newState) {
			ACadScene scene = this.getACadScene();
			switch(newState) {
			case EDIT:
				populateVertices();
				if (scene != null) {
					scene.activeEntity = this;
				}
				break;
			case VIEW:
			default:
				vertexSelectedPrevious = VERTEXNONE;
				vertexTouchedAgain = false;
				clearVertices();
				if (scene != null) {
					if (scene.activeEntity == this) {
						scene.activeEntity = null;
					}
				}
				break;
			}
			updateStats();
			recalculateMeasurements();
			populateMeasurements();
			polygonState = newState;
			refreshColor();
		}
	}
	
	/**
	 * Fix the background color.
	 * Unfortunately, a polygon will not show up when it is first added
	 * to the Scene, even if the background color is already set.  It must be
	 * set again, so here is a function to do it all in one place.
	 */
	public void refreshColor() {
		switch(polygonState) {
		case EDIT:
			// Set the background color.
			if (displayShape != null) {
				displayShape.setColor(.8f, .8f, .8f, .6f);
			}
			break;
		case VIEW:
		default:
			// Set the background color
			if (displayShape != null) {
				displayShape.setColor(0f, 0f, 0f, 0f);
			}
			break;
		}
	}

	/**
	 * Return the current state as defined by PolygonState.
	 */
	public PolygonState getState() {
		return polygonState;
	}
	
	/**
	 * Set a specific vertex as active.
	 */
	public void setVertex(int newVertex) {
		// Clear the old vertex
		for (int i = 0; i < vertex.length; i++) {
			if (i != newVertex && vertex[i] != null) {
				vertex[i].setColor(1f, 1f, 1f, 1f);
			}
		}
		// Set the new vertex;
		if (0 <= newVertex && newVertex < vertex.length && vertexTouchable[newVertex]) {
			vertexSelected = newVertex;
			vertex[vertexSelected].setColor(0f, 1f, 0f, 1f);
		}
		// Invalid choice, clear the selected vertex.
		else {
			vertexSelected = VERTEXNONE;
		}
	}
	
	/**
	 *  Return the currently selected Vertex.
	 */
	public int getVertex() {
		return vertexSelected;
	}
	
	/**
	 * Enable/Disable the ability of this object to be touched.
	 */
	public void setTouchableState(boolean newTouchable) {
		this.isTouchable = newTouchable;
		if (this.getState() == PolygonState.EDIT) {
			this.setState(PolygonState.VIEW);
		}
	}
	
	/**
	 * Return the touchable state of the object.
	 */
	public boolean getTouchableState() {
		return this.isTouchable;
	}
	
	/**
	 * Set the Rotatable state of the object.
	 */
	public void setRotatableState(boolean newRotatable) {
		this.isRotatable = newRotatable;
	}
	
	/**
	 * Return the Rotatable state of the object.
	 */
	public boolean getRotatableState() {
		return this.isRotatable;
	}
	
	/**
	 * Fetch the extrema of the vertices measurements, relative to the Scene.
	 * This is not the same as maxX, maxY, etc., because those are relative to
	 * this object.  We do not store these values because this function is not
	 * called often, and we don't want to waste time updating them continually.
	 * Returns {minX, minY, maxX, maxY}
	 */
	public float[] getSceneExtrema() {
		float sceneCoords[];
		float sceneMaxX = Float.MIN_VALUE;
		float sceneMaxY = Float.MIN_VALUE;
		float sceneMinX = Float.MAX_VALUE;
		float sceneMinY = Float.MAX_VALUE;
		for (int i = 0; i < mVertexX.length; i++) {
			sceneCoords = this.convertLocalToSceneCoordinates(mVertexX[i], mVertexY[i]);
			if (sceneCoords[0] < sceneMinX) {
				sceneMinX = sceneCoords[0];
			}
			if (sceneCoords[0] > sceneMaxX) {
				sceneMaxX = sceneCoords[0];
			}
			if (sceneCoords[1] < sceneMinY) {
				sceneMinY = sceneCoords[1];
			}
			if (sceneCoords[1] > sceneMaxY) {
				sceneMaxY = sceneCoords[1];
			}
		}
		return new float[]{sceneMinX, sceneMinY, sceneMaxX, sceneMaxY};
	}
	
	/**
	 * Required function.  Yeah, we're not even going to try to implement this!
	 */
	@Override
	public boolean collidesWith(IShape pOtherShape) {
		return false;
	}

	/**
	 * Required function.
	 */
	@Override
	public IVertexBufferObject getVertexBufferObject() {
		return displayShape.getVertexBufferObject();
	}

	/**
	 * Required function.
	 */
	@Override
	protected void onUpdateVertices() {
		
	}

	/**
	 * Need to double-check why this is here...
	 */
	public void setJSONEllipseVertices(double jsonAngle, double jsonInRadius) {
	}
}
